#!/usr/bin/env node
var NodeunitRunner = require('../nodeunit_runner').NodeunitRunner,
  fs = require('fs');

// Describe all help methods
var argv = require('optimist')
  .usage("Rcover usage")
  // Type of rcover run
  .demand('t')
  .alias('t', 'type')
  .describe('t', 'type of run, [nodeunit, plain]')
  // List of files or paths
  .demand('p')
  .alias('p', 'paths')
  .describe('p', 'list of paths and/or files to run path1,path2,path3')
  // List of ignore filters
  .alias('i', 'ignore')
  .describe('i', 'list of regular expressions excluding files node_module,test')
  // Any specific test to run
  .alias('m', 'method')
  .describe('m', 'method to run')
  // Output directory
  .alias('o', 'output')
  .describe('o', 'output directory for report')
  .default('o', './rcover_report')
  .argv;

// Let's check if the type is correct
if(!argv.type.match(/^nodeunit$|^plain$/)) {
  console.log("type must be one of [nodeunit, plain]");
  process.exit(0);
}

// The runner for the library
var runner = null;
// Map the files
var final_files = argv.paths.split(/\,/).map(function(m) { 
  var file = m.trim();
  try {
    fs.statSync(process.cwd() + "/" + file);
    file = process.cwd() + "/" + file;
  } catch (err) {}
  return file; 
});

var ignore = [];
// Map the ignore files
if(Array.isArray(argv.ignore)) {
  ignore = argv.ignore.split(/\,/).map(function(m) { 
    return m.trim();
  });  
}

// Allright we have a valid type build the correct object
// to run the cover test
switch(argv.type) {
  case 'nodeunit':
    runner = new NodeunitRunner(final_files, ignore, argv.method, argv);
    break;
  case 'plain':
    break;
}

// Execute the rcover method
runner.run();

